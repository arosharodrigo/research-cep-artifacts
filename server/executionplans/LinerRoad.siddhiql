/* Enter a unique ExecutionPlan */
@Plan:name('LinerRoad')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */
define stream dailyExpenseReportRequestsStream ( iij_timestamp LONG, timeOfRecord LONG, vid INT, xway INT, qid INT, day INT);
define stream accountBalanceReportRequestsStream ( iij_timestamp LONG, timeOfRecord LONG, vid INT, qid INT);
define stream positionReportsStream ( iij_timestamp LONG, timeOfRecord LONG, vid INT, speed INT, xway INT, lane INT, dir INT, mile INT, ofst INT);

define table StoppedCarsTable ( vid INT, xway INT, lane INT, dir INT, mile INT, ofst INT );
define table SmashedCars ( vid INT );
define table Accidents ( vid INT );
define table CarTolls (mile INT, lav DOUBLE, toll DOUBLE);
define table NOVTable (mile INT, nov LONG);
define table LAVTable (mile INT, lav DOUBLE);
define table VehicleInfo (vid INT, toll DOUBLE);

define stream zeroSpeedStream ( vid INT, timeOfRecord LONG, xway INT, lane INT, dir INT, mile INT, ofst INT );
define stream accidentAlertsStream(type INT, vid INT, xway INT, mile INT, dir INT);
define stream tollNotifcationStreamNOV ( vid INT, timeOfRecord LONG, mile INT, xway INT, nov LONG, lane INT );
define stream tollNotifcationStreamLAV ( vid INT, timeOfRecord LONG, mile INT, xway INT, lav DOUBLE, lane INT );
define stream tollNotifcationStream ( type INT, vid INT, toll DOUBLE, lav DOUBLE );
define stream accountBalanceResponseStream ( type INT, qid INT, balance INT );
define stream dailyExpenseResponseStream( type INT, qid INT, dailyexp INT );

@from(eventtable = 'rdbms' , datasource.name = 'cepDataSource' , table.name = 'history') 
define table history (carid INT, day INT, xway INT, dailyexp INT);

/*Are there at least two cars at this position and are they stopped in 4 reports*/

/*Accident detection
First we select all the cars that are stopped*/
from positionReportsStream [speed == 0] 
select vid, timeOfRecord, xway, lane, dir, mile, ofst  
insert into zeroSpeedStream;

/*We need to select only the position reports which are not present in the Stopped cars table.*/
from positionReportsStream[not(vid == StoppedCarsTable.vid) in StoppedCarsTable] 
select vid, xway, lane, dir, mile, ofst 
insert into intermStream1;

/*Next, we add the cars which were not present in the Stopped cars table.*/
from intermStream1 
select vid, xway, lane, dir, mile, ofst 
insert into StoppedCarsTable;

/*Also we select the cars which were already in the table.*/
from positionReportsStream[(vid == StoppedCarsTable.vid) in StoppedCarsTable] 
select vid, xway, lane, dir, mile, ofst 
insert into intermStream2;

/*then we update the records already there in the Stopped cars table.*/
from intermStream2 
update StoppedCarsTable on vid == StoppedCarsTable.vid;

/*We take a time window of 120 seconds and then count the number of occurrence of a vehicle's ID within that 120 seconds time frame.*/
from zeroSpeedStream#window.externalTime(timeOfRecord, 120 sec) 
select vid, count(vid) as vcnt, xway, lane, dir, mile, ofst 
group by vid 
insert into smashedStream;

/*If we can find more than four occurrences of the same vehicle ID across 120 second time frame, with another vehicle stopped at the same location, we determine this as an accident scenario.*/
from every (e1=smashedStream[vcnt >= 4] -> e2=smashedStream[xway == e1.xway and vcnt >= 4 and mile == e1.mile and ofst == e1.ofst and lane == e1.lane and dir == e1.dir])
select e1.vid as vid1, e2.vid as vid2, e1.mile,e1.xway, e1.dir 
insert into intermStream3;

/*Once we detect an accident we need to notify all the vehicles 5 miles upstream that there is a downstream accident so that it can check an alternative route.
the notification should only be sent to the vehicles on the same express way.*/
from intermStream3#window.length(1) join StoppedCarsTable [math:abs(mile - StoppedCarsTable.mile) < 5 and intermStream2.xway == xway] 
select 1 as type, StoppedCarsTable.vid, StoppedCarsTable.xway, StoppedCarsTable.mile, StoppedCarsTable.dir 
insert into accidentAlertsStream;

/*Toll calculation
If a vehicle enters a new segment, a toll for that segment is calculated and the vehicle is notified of that toll. We use an event pattern detection to find out whether a vehicle is entering
a new segment or not.*/
from every (e1=positionReportsStream -> e2=positionReportsStream[e1.mile != e2.mile]) 
select e1.vid, e1.timeOfRecord * 1000 as timeOfRecord, e1.mile, e2.mile as mile2, e1.xway, e1.dir, e1.lane, e2.speed as speed 
insert into intermStream4;

from intermStream4#window.externalTime(timeOfRecord, 60000) 
select mile, count(vid) as nov 
group by mile 
insert into NOVTable;

from positionReportsStream#window.externalTime(timeOfRecord, 300000) 
select mile, avg(speed) as lav 
group by mile 
insert into LAVTable;

from intermStream4#window.length(1) join NOVTable on mile == NOVTable.mile 
select intermStream4.vid, intermStream4.timeOfRecord, NOVTable.mile, intermStream4.xway, NOVTable.nov, intermStream4.lane 
insert into tollNotifcationStreamNOV;

from intermStream4#window.length(1) join LAVTable on mile == LAVTable.mile 
select intermStream4.vid, intermStream4.timeOfRecord, LAVTable.mile, intermStream4.xway, LAVTable.lav, intermStream4.lane 
insert into tollNotifcationStreamLAV;

from tollNotifcationStreamNOV#window.length(1) join tollNotifcationStreamLAV on (tollNotifcationStreamNOV.mile == tollNotifcationStreamLAV.mile and tollNotifcationStreamNOV.vid == tollNotifcationStreamLAV.vid) 
select tollNotifcationStreamNOV.vid, tollNotifcationStreamNOV.timeOfRecord, tollNotifcationStreamNOV.mile, tollNotifcationStreamNOV.xway, tollNotifcationStreamLAV.lav, tollNotifcationStreamNOV.nov, tollNotifcationStreamNOV.lane  
insert into tollNotifcationStreamNOVLAV;

from tollNotifcationStreamNOVLAV [(lav > 40 or nov < 50) and lane == 0] 
select mile, lav, 0d as toll 
insert into CarTolls;

from tollNotifcationStreamNOVLAV [(lav < 40 or nov > 50) and lane != 0] 
select mile, lav, 2d*(nov-50)*(nov-50) as toll 
insert into CarTolls;

/*Next, we need to calculate the toll for that segment and the vehicle needs to be notified about the toll.*/
from intermStream4#window.length(1) join CarTolls on (intermStream4.mile == CarTolls.mile) 
select 0 as type, intermStream4.vid, CarTolls.lav, CarTolls.toll 
insert into tollNotifcationStream2;

/*This is to filter the duplicate events.*/
from every (e1=tollNotifcationStream2 -> e2=tollNotifcationStream2[e1.vid != e2.vid or e1.toll != e2.toll]) 
select 0 as type, e2.vid, e2.toll, e2.lav 
insert into tollNotifcationStream;

/*VehicleInfo*/
from tollNotifcationStream 
select vid, toll 
insert into VehicleInfo;

/*History queries
Account balance query
At the start of the simulation, every vehicleâ€™s account balance is zero, and thereafter the account balance at time t is the sum of all tolls assessed as of t.*/
from accountBalanceReportRequestsStream#window.length(1) join VehicleInfo on (vid == VehicleInfo.vid) 
select 2 as type, accountBalanceReportRequestsStream.qid, convert(sum(VehicleInfo.toll), 'INT') as balance 
group by VehicleInfo.vid 
insert into accountBalanceResponseStream;

/*Daily expenditure query*/
from dailyExpenseReportRequestsStream#window.length(1) join history on ((dailyExpenseReportRequestsStream.vid == history.carid)and(dailyExpenseReportRequestsStream.day == history.day)) 
select 3 as type, dailyExpenseReportRequestsStream.qid as qid, convert(sum(history.dailyexp), 'INT') as dailyexp 
group by dailyExpenseReportRequestsStream.day 
insert into dailyExpenseResponseStream;

